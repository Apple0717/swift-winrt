import CodeWriters
import DotNetMetadata

struct SwiftNamespaceModuleFileWriter {
    private let sourceFileWriter: SwiftSourceFileWriter
    private let module: SwiftProjection.Module
    private var projection: SwiftProjection { module.projection }

    init(path: String, module: SwiftProjection.Module) {
        self.sourceFileWriter = SwiftSourceFileWriter(output: FileTextOutputStream(path: path))
        self.module = module

        sourceFileWriter.output.writeLine("// Generated by swift-winrt")
        sourceFileWriter.output.writeLine("// swiftlint:disable all")

        sourceFileWriter.writeImport(module: module.assemblyModuleName)
    }

    func writeAlias(_ typeDefinition: TypeDefinition) throws {
        if let interface = typeDefinition as? InterfaceDefinition {
            try sourceFileWriter.writeProtocol(
                visibility: SwiftProjection.toVisibility(interface.visibility),
                name: projection.toProtocolName(interface, namespaced: false),
                typeParameters: interface.genericParams.map { $0.name },
                bases: [projection.toBaseProtocol(interface)]) { _ in }
        }

        try sourceFileWriter.writeTypeAlias(
            visibility: SwiftProjection.toVisibility(typeDefinition.visibility),
            name: projection.toTypeName(typeDefinition, namespaced: false),
            typeParameters: typeDefinition.genericParams.map { $0.name },
            target: SwiftType.identifier(
                name: projection.toTypeName(typeDefinition),
                genericArgs: typeDefinition.genericParams.map { SwiftType.identifier(name: $0.name) }))
    }
}