import Collections
import CodeWriters
import DotNetMetadata

public struct SwiftAssemblyModuleFileWriter {
    internal let sourceFileWriter: SwiftSourceFileWriter
    internal let module: SwiftProjection.Module
    internal var projection: SwiftProjection { module.projection }

    public init(path: String, module: SwiftProjection.Module, importAbiModule: Bool) {
        self.sourceFileWriter = SwiftSourceFileWriter(output: FileTextOutputStream(path: path))
        self.module = module

        sourceFileWriter.writeCommentLine("Generated by swift-winrt")
        sourceFileWriter.writeCommentLine("swiftlint:disable all", groupWithNext: false)

        if importAbiModule {
            sourceFileWriter.writeImport(module: projection.abiModuleName)
        }
        sourceFileWriter.writeImport(module: "WindowsRuntime")

        for reference in module.references {
            sourceFileWriter.writeImport(module: reference.assemblyModuleName)
        }

        sourceFileWriter.writeImport(module: "Foundation", struct: "UUID")
    }

    public func writeTypeDefinition(_ typeDefinition: TypeDefinition) throws {
        switch typeDefinition {
            case let interfaceDefinition as InterfaceDefinition:
                try writeInterface(interfaceDefinition)
            case is ClassDefinition:
                break // Unified with the projection for now
            case let structDefinition as StructDefinition:
                try writeStruct(structDefinition)
            case let enumDefinition as EnumDefinition:
                try writeEnum(enumDefinition)
            case let delegateDefinition as DelegateDefinition:
                try writeDelegate(delegateDefinition)
            default:
                assertionFailure("Unexpected TypeDefinition kind: \(typeDefinition.kind)")
        }
    }

    public func writeProjection(_ typeDefinition: TypeDefinition, genericArgs: [TypeNode]? = nil) throws {
        let hasGenericArgs = (genericArgs?.count ?? 0) > 0
        switch typeDefinition {
            case is InterfaceDefinition:
                try writeInterfaceOrDelegateProjection(typeDefinition, genericArgs: genericArgs)

            case let classDefinition as ClassDefinition:
                assert(!hasGenericArgs)
                try writeClassProjection(classDefinition)

            case let enumDefinition as EnumDefinition:
                assert(!hasGenericArgs)
                try writeEnumProjection(enumDefinition)

            case let structDefinition as StructDefinition:
                assert(!hasGenericArgs)
                try writeStructProjection(structDefinition)

            case is DelegateDefinition:
                try writeInterfaceOrDelegateProjection(typeDefinition, genericArgs: genericArgs)

            default: fatalError("Unexpected type definition kind")
        }
    }
}